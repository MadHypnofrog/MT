grammar SecondTask;

!s [returns List<String> namesWithTypes]:
    t=typedec {String type = t.text;} vars({type}) {$namesWithTypes = vars.list;}
    ;
typedec [returns String text]:
    NAME {$text = NAME.value;}
    ;
vars (String type) [returns List<String> list]
    : varname nextvars({type}) {$list = new ArrayList<>();$list.add(type + ": " + varname.name);$list.addAll(nextvars.list);}
    ;
varname [returns String name]
    : AST varname {$name = "*" + varname.name;}
    | t=NAME {$name = t.value;}
    ;
nextvars (String type) [returns List<String> list]
    : COMMA vars({type}) {$list = vars.list;}
    | SEMICOLON {$list = new ArrayList<>();}
    ;

AST
    = '*'
    ;

SEMICOLON
    = ';'
    ;

COMMA
    = ','
    ;

NAME
    : '[a-zA-Z_][a-zA-Z0-9_]*'
    ;


WS -> '[ \t\r\n]'
    ;